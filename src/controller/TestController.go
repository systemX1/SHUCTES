package controller

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"os"
)


func TestGetMethod() gin.HandlerFunc  {
	return func(context *gin.Context) {
		context.JSON(http.StatusOK, gin.H{
			"msg": 	"Hello, World!",
		})
	}
}

func TestPutMethod() gin.HandlerFunc  {
	return func(context *gin.Context) {
		context.JSON(http.StatusOK, gin.H{
			"State": 	"OK",
		})
	}
}

func TestPostMethod() gin.HandlerFunc  {
	return func(context *gin.Context) {


	}
}

//https://mholt.github.io/json-to-go/ 自动生成go struct
func TestDeleteMethod() gin.HandlerFunc  {
	return func(c *gin.Context) {
		//json对应struct
		//{
		//	"name":	"网站",
		//	"num":3,
		//	"sites": [
		//		{ "name": "Google", "info":[ "Android", "Google 搜索", "Google 翻译" ] },
		//		{ "name": "TaoBao", "info":[ "淘宝", "网购" ] }
		//	]
		//}
		type AutoGenerated struct {
			Name  string `json:"name"`
			Num   int    `json:"num"`
			Sites []struct {
				Name string   `json:"name"`
				Info []string `json:"info"`
			} `json:"sites"`
		}

		var json AutoGenerated
		if err := c.BindJSON(&json); err != nil {
			_ = c.Error(err).SetType(gin.ErrorTypePublic).SetMeta("While binding json to struct: " + err.Error())
		} else {
			c.JSON(http.StatusOK, gin.H{
				"name":	json.Name,
				"num":	json.Num,
				"sites":json.Sites,
				"os.Args": os.Args[1:],
			})
		}
	}
}



